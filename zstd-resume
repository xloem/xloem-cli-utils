infile="$1"
outfile="$2"
tmpfile="$2".resume

set -e

shift 2

BLOCKSIZE=$((1024*1024))

get_file_size()
{
    if ! [ -e "$1" ]
    then
        echo 0
    elif [ "$(stat -c %F "$1")" == "block special file" ]
    then
        blockdev --getsize64 "$1"
    else
        stat -c %s "$1"
    fi
}

get_free_space() {
    df --block-size=1 --portability . | {
        read headers
        read path blocks used avail capacity mount
        echo "$avail"
    }   
}

check_outfile_has_size() {
    if ! zstd --list --verbose "$outfile" | grep Decompressed
    then
        echo 'outfile does not have size?' "$*"
        exit -1
    fi
}

check_disk_has_tmp2out_space() {
    if (( $(get_free_space) < $(get_file_size "$tmpfile") ))
    then
        echo "Out of space to append $(get_file_size "$tmpfile") bytes"
        exit -1
    fi
}

transfer_tmp2out() {
    echo "Finishing incomplete portion ..."
    check_disk_has_tmp2out_space
    if zstd --list --verbose "$tmpfile" | grep Decompressed
    then
        # tmpfile has size and can be catted straight
        cat "$tmpfile" >> "$outfile"
    else
        last_frame_end=$(get_file_size "$outfile")
        extra_size=$(zstdcat "$tmpfile" 2>/dev/null | wc -c)
        zstdcat "$tmpfile" 2>/dev/null | zstd "$@" --stream-size="$extra_size" | pv --cursor --size $(get_file_size "$tmpfile") >> "$outfile"
        check_outfile_has_size "Last frame ended at $last_frame_end"
    fi
    sync
    rm "$tmpfile"
}

if [ -e "$outfile" ]; then check_outfile_has_size; fi

# if the tmpfile exists, recompress it so as to have the right size header
if [ -e "$tmpfile" ]
then
    transfer_tmp2out
fi

# find the size to continue after

if [ -e "$outfile" ]
then
    resume_size=$(zstd --list --verbose "$outfile" | sed -ne 's/Decompressed Size: .*(\(.*\) B)/\1/p')
else
    resume_size=0
fi

if [ "$infile" == "-" ] || [ "$infile" == "/dev/stdin" ]
then
    if (( resume_size != 0 ))
    then
        if [ "$ZSTD_RESUME_OFFSET" != "" ]
        then
            echo "Skipping $((resume_size - ZSTD_RESUME_OFFSET)) bytes of input ..."
            input_hash=$(head -c $((resume_size - ZSTD_RESUME_OFFSET)) | pv --cursor -Ss $((resume_size - ZSTD_RESUME_OFFSET)) | b2sum)
            data_hash=$(zstdcat "$outfile" | tail -c +$((ZSTD_RESUME_OFFSET+1)) | b2sum)
        else
            echo "Skipping $resume_size bytes of input ..."
            input_hash=$(head -c $((resume_size)) | pv --cursor -Ss $((resume_size)) | b2sum)
            data_hash=$(zstdcat "$outfile" | b2sum)
        fi
        if [ "$input_hash" != "$data_hash" ]
        then
            echo "Skipped data ($input_hash) differs from stored data ($data_hash)."
            exit -1
        fi
    fi
    resume_size=0
    infile=/dev/stdin
    pv_size=
    zst_size=
else
    transfer_size=$(($(get_file_size "$infile") - resume_size))
    pv_size="--size $transfer_size"
    zst_size="--stream_size $transfer_size"
fi

if [ -e "$tmpfile" ]
then
    echo "for some reason tmpfile exists"
    exit -1
fi
    
{
    echo "Compressing new data ..."
    if [ "$infile" == "/dev/stdin" ]
    then
        #{
        #    cat "$infile" #&
        #    #echo $! > "$tmpfile".pid
        #} |
        #pv --cursor -ptearb $pv_size | zstd "$@" $zst_size | pv -ptearbc > "$tmpfile" &
        dd if="$infile" iflag=skip_bytes skip=$resume_size bs=$BLOCKSIZE | pv --cursor -ptearb $pv_size | zstd "$@" $zst_size | pv -ptearbc > "$tmpfile" &
        echo $! > "$tmpfile".pid
    else
        dd if="$infile" iflag=skip_bytes skip=$resume_size bs=$BLOCKSIZE | pv --cursor -ptearb $pv_size | zstd "$@" $zst_size | pv -ptearbc > "$tmpfile" &
        echo $! > "$tmpfile".pid
    fi
    sleep 1
    compresspid=$(<"$tmpfile".pid)
    rm "$tmpfile".pid
    while ps $compresspid >/dev/null
    do
        sleep 1
        if (( $(get_file_size "$tmpfile") * 2 >= $(get_free_space) ))
        then
            kill "$compresspid"
            sleep 1
            wait
            echo
            echo Terminated compression due to disk usage.
            echo
            transfer_tmp2out
            #ZSTD_RESUME_OFFSET=$(zstd --list --verbose "$outfile" | sed -ne 's/Decompressed Size: .*(\(.*\) B)/\1/p') exec "$0" "$infile" "$outfile" "$@"
            exit -2
        fi
    done
}

transfer_tmp2out
check_outfile_has_size "otherwise things are complete"
